$(document).ready(function(){
  
//ESTABLISH STORAGE KEY AND EITHER GET RECIPES FROM STORAGE
// OR SET THIS RECIPIES VARIABLE TO STATE WHICH WILL GET SET TO STORAGE
var localStorageKey = "benjaminadk_MY_RECIPES";
var recipes = JSON.parse(localStorage.getItem(localStorageKey)) || [{
      name:"Carrot Cake", 
      ingredients: [["Grated Carrots","3 Cups"],["Flour","2 Cups"],["Sugar","2 Cups"],["Eggs","4"],["Vegetable Oil","1 Cup"],["Vanilla Extract","1 Teaspoon"],["Cinnamon","2 Teaspoons"],["Baking Soda","1.5 Teaspoons"]],
      instructions: ["Heat oven to 350 F","Combine wet ingredients in bowl and mix","Add dry ingredients to bowl","Stir until smooth","Gently fold in carrots","Bake 30-35 minutes","Remove from oven and cool","Apply cream cheese frosting"],
      url:"https://s3-us-west-2.amazonaws.com/s.cdpn.io/1216298/carrotcake.jpg"},{
      name: "Cream Cheese Frosting",
      ingredients: [["Cream Cheese","16 Ounces"],["Powdered Sugar","8 Ounces"],["Vanilla","1 Teaspoon"],["Butter","1 Stick"]],
      instructions: ["Bring Cream Cheese and Butter to room temperature","Combine ingredients","Apply to Mom's Killa Carrot Cake"],
      url:"https://s3-us-west-2.amazonaws.com/s.cdpn.io/1216298/creamcheese.jpg"},{
      name: "Chocolate Chip Cookies",
      ingredients: [["Flour","4 Cups"],["Butter","2 Cups"],["Eggs","4"],["Sugar","2 Cups"],["Baking Soda","2 Teaspoons"],["Baking Powder","2 Teaspoons"],["Vanilla Extract","2 Teaspoons"],["Oatmeal","5 Cups"],["Chocolate Chips","24 Ounces"],["Brown Sugar","2 Cups"],["Salt","1 Teaspoon"],["Chopped Nuts","3 Cups (Optional)"]],
      instructions: ["Heat oven to 375 F","Combine wet ingredients in bowl and mix","Add dry ingredients to bowl","Stir until smooth","Gently fold in chocolate chips and nuts","Bake for 10 minutes","Remove and Eat"],
      url:"https://s3-us-west-2.amazonaws.com/s.cdpn.io/1216298/cookies.jpg"
    }];
class Recipe extends React.Component {
  constructor(props) {
    super(props);
  }
   handleDelete(event, index) {
    this.props.deleteRecipe(event, index);
  }
  handleEdit(event,index) {
    this.props.editRecipe(event, index);
  }
  render(){
    var ingredientList = [];
    var instructionList = [];
    for(let i = 0; i < this.props.ingredients.length; i++){
        ingredientList.push(
        <span className="ingredient">{this.props.ingredients[i][0]}<span className="quantity">
        {this.props.ingredients[i][1]}</span></span>
        );}
    for(let j = 0; j < this.props.instructions.length; j++){
      instructionList.push(
      <li className="instruction">{this.props.instructions[j]}</li>
      );
      }
    
    return(
   
  <li className="accordion-item" id={this.props.index} data-accordion-item>
    <a href={'#'+this.props.index} className="accordion-title">{this.props.name}</a>
    <div className="accordion-content" data-tab-content>
      <div className="row">
        <div className="column medium-4 small-12 leftCol">
          <p id="ingredientTitle">Ingredients</p>
                   {ingredientList}
        </div>
        <div className="column medium-4 small-12 midImgBut">
          <img src={this.props.url} alt="photo of food item" className="thumbnail" height="200px" width="200px"/>
          <div id="midButBox">
          <button type="button" className="button delete"onClick={this.handleDelete.bind(this, this.props.index)}>DELETE</button>
          <button type="button" className="button edit"onClick={this.handleEdit.bind(this,this.props.index)}>EDIT</button>
          </div>
        </div>
        <div className="column medium-4 small-12 rightCol">
          <p id="instructionTitle">Instructions</p>
          <ol id="instructionsOL">{instructionList}</ol>
        </div>
      </div>
        </div>
        </li>
    );
  }
}

class RecipeBox extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    var recipeComponents = [];
    for (let i = 0; i < this.props.recipes.length; i++) {
      recipeComponents.push(
        <Recipe name={this.props.recipes[i].name}
          ingredients={this.props.recipes[i].ingredients} 
          instructions={this.props.recipes[i].instructions}
          url={this.props.recipes[i].url}
          deleteRecipe={this.props.deleteRecipe.bind(this)}
          editRecipe={this.props.editRecipe.bind(this)}
          index={i}/>);
    
  
    }
    return(
    <ul className="accordion" data-accordion id="recipeBox">
        {recipeComponents}
        </ul>
      
    );
  }
}

const AddButton = (props) => {
  return(
  <button type="button" className="expanded button" id="addRecipe" data-open="newItem">ADD RECIPE</button>
  );
}

const Reveal = (props) => {
  return(
  <div className="reveal" id="newItem" data-reveal>
  <h1 id="newRecipe">New Recipe</h1>
  <label className="label">Recipe Name</label>
  <input type="text" id="recipeName" placeholder="Enter the Name of New Recipe Here"/>
  <label className="label">Ingredients</label>
  <textarea id="rIngredients" placeholder="Enter Ingredient Comma Measurement Comma New Ingredient....."/>
  <label className="label">Instrucions</label>
  <textarea id="rInstructions" placeholder="Enter Instructions Each Step Followed By A Comma"/>
  <label className="label">Photo URL</label>
  <input type="text" id="photoURL" placeholder="Enter the URL of Photo Here"/>
  <button className="button expanded" type="button" id="saveRecipe" onClick={props.add}>
    SAVE</button>
  <button className="button expanded" type="button" id="revealClose" onClick={props.close}>
    CANCEL</button>
</div>
  );
}

const Title = () => {
  return(
    <footer>
  <span id="title">Grandma's New School Recipe Box | &copy; 2017 | @benjaminadk</span>
      </footer>
  );
}

class App extends React.Component {
  constructor(props) {
    super(props);
        
    this.state = {
      recipes: recipes,
      editMode: false,
      editIndex: -1
    };
    this.addRecipe = this.addRecipe.bind(this);
  }
  componentDidMount(){ 
//FOUNDATION JS INITIALIZERS
var options = {
  slideSpeed:500,
  allowAllClosed:true,
  deepLink:true,
  deepLinkSmudge:true,
  updateHistory:true
};
var accordion = new Foundation.Accordion($("#recipeBox"),options);
    
var mOptions = {
  animationIn: "spin-in",
  animationOut: "spin-out-ccw"
};
var reveal = new Foundation.Reveal($("#newItem"),mOptions);
  } 
 
  //APP CLASS METHODS
  //CLOSE METHOD FOR REVEAL AKA MODAL
  closeReveal() {
    $('#newItem').foundation('close');
  }
  //METHOD FOR ADDING RECIPES
  addRecipe(e,index) {
    var rName = document.getElementById("recipeName").value,
        rIng = document.getElementById("rIngredients").value,
        rIns = document.getElementById("rInstructions").value,
        rImg = document.getElementById("photoURL").value;
    
        if(rName.length > 0 && rIng.length > 0 && rIns.length > 0 ) {
          var newRecipes = this.state.recipes;
          var tempIng = rIng.split(",");
          var newIns = rIns.split(",");
          var newIng = [];
          for(let i = 0; i < tempIng.length; i+=2){
            newIng.push([tempIng[i],tempIng[i+1]]);
          }
          var newRecipe = {
            name: rName,
            ingredients: newIng,
            instructions: newIns,
            url: rImg
          }
          if(this.state.editMode){
            newRecipes.splice(this.state.editIndex,1,newRecipe);
          }
          else{
          newRecipes.push(newRecipe);
          }
           this.setState({
             recipes: newRecipes,
             editMode: false,
             editIndex: -1
           });
          localStorage.setItem(localStorageKey, JSON.stringify(newRecipes)); 
           
          $('#newItem').foundation('close');
          location.reload();
        }
    else{
      alert("Please finish filling out the New Recipe Input Boxes");
    }
  }
  
  //METHOD TO EDIT A RECIPE
   editRecipe(index) {
     var rName = document.getElementById("recipeName"),
         rIng = document.getElementById("rIngredients"),
         rIns = document.getElementById("rInstructions"),
         rImg = document.getElementById("photoURL");
     
     rName.value = this.state.recipes[index].name;
     rIng.value = this.state.recipes[index].ingredients.join(",");
     rIns.value = this.state.recipes[index].instructions;
     rImg.value = this.state.recipes[index].url;
     this.setState({
       editMode: true,
       editIndex: index
     });
     $("#newItem").foundation("open");
   }
  
  //METHOD TO DELETE A RECIPE
   deleteRecipe(index) {
     var newRecipeState = this.state.recipes.filter((el, i) => i !== index);
    localStorage.setItem(localStorageKey, JSON.stringify(newRecipeState));
    this.setState({
      recipes: newRecipeState
      });
  }
  render() {
    
    return (
      <div id="appWrapper">
      <RecipeBox recipes={this.state.recipes}
                 deleteRecipe={this.deleteRecipe.bind(this)}
                 editRecipe={this.editRecipe.bind(this)}/>
      <AddButton/>
        <Title/>
        <Reveal close={this.closeReveal}
                add={this.addRecipe}/>
        </div>
    );
  }
   
}

ReactDOM.render(<App/>,document.getElementById('app'));
  
});
